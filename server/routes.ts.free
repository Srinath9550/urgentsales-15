  // Create a property without authentication (free mode)
  app.post(
    "/api/properties/free",
    upload.any(), // Accept files with any field name
    asyncHandler(async (req, res) => {
      try {
        console.log(
          "Free property submission body:", 
          JSON.stringify(req.body, null, 2)
        );
        
        console.log("Files received:", req.files ? req.files.length : 0);

        // Process file uploads - group by category
        const uploadedFiles = [];
        const videoUrls = [];
        const imageCategories = {};
        const guestId = Math.floor(Math.random() * 1000000); // Use a consistent ID for all files
        
        if (req.files && Array.isArray(req.files)) {
          req.files.forEach((file) => {
            const fieldName = file.fieldname || '';
            const category = fieldName.split('_')[0] || 'other';
            
            // Create unique filename to prevent collisions
            const filename = `${file.originalname}-${Math.random().toString(16).substring(2)}`;
            const fileUrl = `/uploads/user-${guestId}/${filename}`;
            
            // Initialize category array if it doesn't exist
            if (!imageCategories[category]) {
                imageCategories[category] = [];
            }
            
            // Check if this is a video file
            if (file.mimetype.startsWith('video/') || fieldName.startsWith('video_')) {
              videoUrls.push(fileUrl);
              
              // Also store in categories
              imageCategories[category].push(fileUrl);
            } else {
              uploadedFiles.push(fileUrl);
              
              // Also store in categories
              imageCategories[category].push(fileUrl);
            }
          });
        }

        // Insert directly into free_properties table using raw SQL
        const query = `
          INSERT INTO free_properties (
            title, description, price, property_type, property_category,
            transaction_type, is_urgent_sale, location, city, project_name,
            pincode, bedrooms, bathrooms, balconies, floor_no,
            total_floors, floors_allowed_construction, furnished_status, road_width, open_sides,
            area, area_unit, contact_name, contact_phone, contact_email,
            whatsapp_enabled, user_type, parking, facing, amenities,
            possession_status, ownership_type, boundary_wall, electricity_status, water_availability,
            flooring_type, overlooking, preferred_tenant, property_age, project_status,
            launch_date, rera_registered, rera_number, landmarks, brokerage,
            no_broker_responses, address, rent_or_sale, image_urls, image_categories,
            approval_status, created_at
          )
          VALUES (
            $1, $2, $3, $4, $5,
            $6, $7, $8, $9, $10,
            $11, $12, $13, $14, $15,
            $16, $17, $18, $19, $20,
            $21, $22, $23, $24, $25,
            $26, $27, $28, $29, $30,
            $31, $32, $33, $34, $35,
            $36, $37, $38, $39, $40,
            $41, $42, $43, $44, $45,
            $46, $47, $48, $49, $50,
            $51, $52
          )
          RETURNING id;
        `;
        
        // Process amenities - handle various input formats
        let amenitiesArray = [];
        if (req.body.amenities) {
          if (Array.isArray(req.body.amenities)) {
            amenitiesArray = req.body.amenities;
          } else if (typeof req.body.amenities === 'string') {
            amenitiesArray = req.body.amenities.split(',').map(a => a.trim());
          }
        }
        
        // Determine rent or sale value
        let rentOrSale = 'sale';
        if (req.body.transactionType) {
          rentOrSale = req.body.transactionType.toLowerCase() === 'rent' ? 'rent' : 'sale';
        } else if (req.body.rentOrSale) {
          rentOrSale = req.body.rentOrSale.toLowerCase();
        }
        
        const values = [
          req.body.title || 'Untitled Property', 
          req.body.description || 'No description provided',
          parseInt(req.body.price) || 0,
          req.body.propertyType || 'residential',
          req.body.propertyCategory || null,
          rentOrSale,
          req.body.isUrgentSale === 'true' || req.body.isUrgentSale === true,
          req.body.location || 'Unknown location',
          req.body.city || 'Unknown city',
          req.body.projectName || null,
          req.body.pincode || null,
          parseInt(req.body.bedrooms) || null,
          parseInt(req.body.bathrooms) || null,
          parseInt(req.body.balconies) || null,
          parseInt(req.body.floorNo) || null,
          parseInt(req.body.totalFloors) || null,
          parseInt(req.body.floorsAllowedForConstruction) || null,
          req.body.furnishedStatus || null,
          req.body.roadWidth || null,
          req.body.openSides || null,
          parseInt(req.body.area) || 0,
          req.body.areaUnit || 'sqft',
          req.body.contactName || 'Anonymous',
          req.body.contactPhone || 'Not provided',
          req.body.contactEmail || 'Not provided',
          req.body.whatsappEnabled === 'true' || req.body.whatsappEnabled === true,
          req.body.userType || 'owner',
          req.body.parking || null,
          req.body.facing || null,
          amenitiesArray,
          req.body.possessionStatus || null,
          req.body.ownershipType || null,
          req.body.boundaryWall || null,
          req.body.electricityStatus || null,
          req.body.waterAvailability || null,
          req.body.flooringType || null,
          req.body.overlooking || null,
          req.body.preferredTenant || null,
          req.body.propertyAge || null,
          req.body.projectStatus || null,
          req.body.launchDate || null,
          req.body.reraRegistered === 'true' || req.body.reraRegistered === true,
          req.body.reraNumber || null,
          req.body.landmarks || null,
          parseInt(req.body.brokerage) || 0,
          req.body.noBrokerResponses === 'true' || req.body.noBrokerResponses === true,
          req.body.address || req.body.location || 'Unknown address',
          rentOrSale,
          uploadedFiles,
          JSON.stringify(imageCategories),
          'pending',
          new Date()
        ];
        
        // Execute the query directly with pg pool
        const result = await pool.query(query, values);
        
        // Get the ID of the newly created property
        const createdPropertyId = result.rows[0].id;
        console.log("Free property created successfully with ID:", createdPropertyId);
        
        // Send email notification to admin about new property
        try {
          // Import email service directly to avoid circular references
          const { sendEmail } = await import('./email-service');
          
          // Format price for display
          const propertyPrice = parseInt(req.body.price) ? `â‚¹${parseInt(req.body.price).toLocaleString()}` : 'Price not specified';
          
          // Send email to admin
          await sendEmail(
            "urgentsale.in@gmail.com", 
            "New Free Property Submission Requires Verification", 
            `
            <h1>New Free Property Submission</h1>
            <p>A new property has been submitted through the free property form and requires your verification:</p>
            <ul>
              <li><strong>Title:</strong> ${req.body.title || 'Untitled Property'}</li>
              <li><strong>Location:</strong> ${req.body.location || 'Unknown location'}${req.body.city ? ', ' + req.body.city : ''}</li>
              <li><strong>Type:</strong> ${req.body.propertyType || 'Not specified'}</li>
              <li><strong>Price:</strong> ${propertyPrice}</li>
              <li><strong>Contact:</strong> ${req.body.contactName || 'Unknown'} (${req.body.contactEmail || 'No email'}, ${req.body.contactPhone || 'No phone'})</li>
              <li><strong>Images:</strong> ${uploadedFiles.length} images uploaded</li>
            </ul>
            <p>Please log in to the admin panel to review and approve this property.</p>
            `
          );
          console.log("Admin notification email sent successfully for free property");
        } catch (emailError) {
          console.error("Error sending notification email:", emailError);
          // Continue with response - don't fail the submission if email fails
        }

        // If we reached here, property was created successfully
        const responseProperty = {
          success: true,
          message: "Property submitted successfully and waiting for admin approval",
          id: createdPropertyId
        };
        
        res.status(201).json(responseProperty);
      } catch (error) {
        console.error("Error creating free property:", error);
        // Provide more detailed error message to the client
        if (error instanceof Error) {
          res.status(500).json({
            message: "Failed to create property",
            error: error.message,
            stack: process.env.NODE_ENV === "development" ? error.stack : undefined,
          });
        } else {
          res.status(500).json({ message: "Unknown error occurred" });
        }
      }
    }),
  );
